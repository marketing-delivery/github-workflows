name: 'Analyze Terraform Plan'
description: 'Analyzes terraform plan output and extracts summary and changes'

inputs:
  plan-output-file:
    description: 'The path to the output of terraform show'
    required: true

outputs:
  summary:
    description: 'The plan summary line'
    value: ${{ steps.analyse-tf-plan.outputs.summary }}
  has_changes:
    description: 'Boolean indicating if there are changes'
    value: ${{ steps.analyse-tf-plan.outputs.has_changes }}
  changes:
    description: 'Detailed changes section'
    value: ${{ steps.analyse-tf-plan.outputs.changes }}

runs:
  using: 'composite'
  steps:
    - name: Analyze Plan
      id: analyse-tf-plan
      shell: bash
      run: |
        # Output current directory for debugging
        echo "Current directory: $(pwd)"
        
        # Verify the plan output file exists
        if [ ! -f "${{ inputs.plan-output-file }}" ]; then
          echo "Error: Plan output file not found at ${{ inputs.plan-output-file }}"
          exit 1
        fi
        
        # Extract the Plan line (with more flexible matching)
        SUMMARY=$(grep -i "^[[:space:]]*plan:" "${{ inputs.plan-output-file }}" || echo "No plan summary found")
        echo "summary=${SUMMARY}" >> $GITHUB_OUTPUT
        
        # Check for changes
        if grep -q "No changes." "${{ inputs.plan-output-file }}"; then 
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          echo "has_changes=true" >> $GITHUB_OUTPUT
        fi
        
        # For the changes section, we'll use base64 encoding to avoid multiline issues
        CHANGES=$(sed -n '/Terraform used the selected providers/,/^Plan:/{ /^Plan:/!p }' "${{ inputs.plan-output-file }}" | base64 -w 0)
        echo "changes=${CHANGES}" >> $GITHUB_OUTPUT